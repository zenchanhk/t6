# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.7.1
#
# <auto-generated>
#
# Generated from file `traderex.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module TraderEx
_M_TraderEx = Ice.openModule('TraderEx')
__name__ = 'TraderEx'

_M_TraderEx._t_DataReceiver = IcePy.defineValue('::TraderEx::DataReceiver', Ice.Value, -1, (), False, True, None, ())

if 'DataReceiverPrx' not in _M_TraderEx.__dict__:
    _M_TraderEx.DataReceiverPrx = Ice.createTempClass()
    class DataReceiverPrx(Ice.ObjectPrx):

        def onData(self, data, context=None):
            return _M_TraderEx.DataReceiver._op_onData.invoke(self, ((data, ), context))

        def onDataAsync(self, data, context=None):
            return _M_TraderEx.DataReceiver._op_onData.invokeAsync(self, ((data, ), context))

        def begin_onData(self, data, _response=None, _ex=None, _sent=None, context=None):
            return _M_TraderEx.DataReceiver._op_onData.begin(self, ((data, ), _response, _ex, _sent, context))

        def end_onData(self, _r):
            return _M_TraderEx.DataReceiver._op_onData.end(self, _r)

        def onError(self, error, context=None):
            return _M_TraderEx.DataReceiver._op_onError.invoke(self, ((error, ), context))

        def onErrorAsync(self, error, context=None):
            return _M_TraderEx.DataReceiver._op_onError.invokeAsync(self, ((error, ), context))

        def begin_onError(self, error, _response=None, _ex=None, _sent=None, context=None):
            return _M_TraderEx.DataReceiver._op_onError.begin(self, ((error, ), _response, _ex, _sent, context))

        def end_onError(self, _r):
            return _M_TraderEx.DataReceiver._op_onError.end(self, _r)

        def onStatus(self, status, context=None):
            return _M_TraderEx.DataReceiver._op_onStatus.invoke(self, ((status, ), context))

        def onStatusAsync(self, status, context=None):
            return _M_TraderEx.DataReceiver._op_onStatus.invokeAsync(self, ((status, ), context))

        def begin_onStatus(self, status, _response=None, _ex=None, _sent=None, context=None):
            return _M_TraderEx.DataReceiver._op_onStatus.begin(self, ((status, ), _response, _ex, _sent, context))

        def end_onStatus(self, _r):
            return _M_TraderEx.DataReceiver._op_onStatus.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_TraderEx.DataReceiverPrx.ice_checkedCast(proxy, '::TraderEx::DataReceiver', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_TraderEx.DataReceiverPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::TraderEx::DataReceiver'
    _M_TraderEx._t_DataReceiverPrx = IcePy.defineProxy('::TraderEx::DataReceiver', DataReceiverPrx)

    _M_TraderEx.DataReceiverPrx = DataReceiverPrx
    del DataReceiverPrx

    _M_TraderEx.DataReceiver = Ice.createTempClass()
    class DataReceiver(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::TraderEx::DataReceiver')

        def ice_id(self, current=None):
            return '::TraderEx::DataReceiver'

        @staticmethod
        def ice_staticId():
            return '::TraderEx::DataReceiver'

        def onData(self, data, current=None):
            raise NotImplementedError("servant method 'onData' not implemented")

        def onError(self, error, current=None):
            raise NotImplementedError("servant method 'onError' not implemented")

        def onStatus(self, status, current=None):
            raise NotImplementedError("servant method 'onStatus' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_TraderEx._t_DataReceiverDisp)

        __repr__ = __str__

    _M_TraderEx._t_DataReceiverDisp = IcePy.defineClass('::TraderEx::DataReceiver', DataReceiver, (), None, ())
    DataReceiver._ice_type = _M_TraderEx._t_DataReceiverDisp

    DataReceiver._op_onData = IcePy.Operation('onData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    DataReceiver._op_onError = IcePy.Operation('onError', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    DataReceiver._op_onStatus = IcePy.Operation('onStatus', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())

    _M_TraderEx.DataReceiver = DataReceiver
    del DataReceiver

_M_TraderEx._t_Server = IcePy.defineValue('::TraderEx::Server', Ice.Value, -1, (), False, True, None, ())

if 'ServerPrx' not in _M_TraderEx.__dict__:
    _M_TraderEx.ServerPrx = Ice.createTempClass()
    class ServerPrx(Ice.ObjectPrx):

        def register(self, clientId, receiver, context=None):
            return _M_TraderEx.Server._op_register.invoke(self, ((clientId, receiver), context))

        def registerAsync(self, clientId, receiver, context=None):
            return _M_TraderEx.Server._op_register.invokeAsync(self, ((clientId, receiver), context))

        def begin_register(self, clientId, receiver, _response=None, _ex=None, _sent=None, context=None):
            return _M_TraderEx.Server._op_register.begin(self, ((clientId, receiver), _response, _ex, _sent, context))

        def end_register(self, _r):
            return _M_TraderEx.Server._op_register.end(self, _r)

        def execute(self, command, context=None):
            return _M_TraderEx.Server._op_execute.invoke(self, ((command, ), context))

        def executeAsync(self, command, context=None):
            return _M_TraderEx.Server._op_execute.invokeAsync(self, ((command, ), context))

        def begin_execute(self, command, _response=None, _ex=None, _sent=None, context=None):
            return _M_TraderEx.Server._op_execute.begin(self, ((command, ), _response, _ex, _sent, context))

        def end_execute(self, _r):
            return _M_TraderEx.Server._op_execute.end(self, _r)

        def longExecutor(self, command, context=None):
            return _M_TraderEx.Server._op_longExecutor.invoke(self, ((command, ), context))

        def longExecutorAsync(self, command, context=None):
            return _M_TraderEx.Server._op_longExecutor.invokeAsync(self, ((command, ), context))

        def begin_longExecutor(self, command, _response=None, _ex=None, _sent=None, context=None):
            return _M_TraderEx.Server._op_longExecutor.begin(self, ((command, ), _response, _ex, _sent, context))

        def end_longExecutor(self, _r):
            return _M_TraderEx.Server._op_longExecutor.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_TraderEx.ServerPrx.ice_checkedCast(proxy, '::TraderEx::Server', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_TraderEx.ServerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::TraderEx::Server'
    _M_TraderEx._t_ServerPrx = IcePy.defineProxy('::TraderEx::Server', ServerPrx)

    _M_TraderEx.ServerPrx = ServerPrx
    del ServerPrx

    _M_TraderEx.Server = Ice.createTempClass()
    class Server(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::TraderEx::Server')

        def ice_id(self, current=None):
            return '::TraderEx::Server'

        @staticmethod
        def ice_staticId():
            return '::TraderEx::Server'

        def register(self, clientId, receiver, current=None):
            raise NotImplementedError("servant method 'register' not implemented")

        def execute(self, command, current=None):
            raise NotImplementedError("servant method 'execute' not implemented")

        def longExecutor(self, command, current=None):
            raise NotImplementedError("servant method 'longExecutor' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_TraderEx._t_ServerDisp)

        __repr__ = __str__

    _M_TraderEx._t_ServerDisp = IcePy.defineClass('::TraderEx::Server', Server, (), None, ())
    Server._ice_type = _M_TraderEx._t_ServerDisp

    Server._op_register = IcePy.Operation('register', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_TraderEx._t_DataReceiverPrx, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    Server._op_execute = IcePy.Operation('execute', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    Server._op_longExecutor = IcePy.Operation('longExecutor', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())

    _M_TraderEx.Server = Server
    del Server

# End of module TraderEx
