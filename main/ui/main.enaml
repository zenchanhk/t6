from enaml.widgets.api import (MainWindow, Window, Dialog, Field, Container, ObjectCombo, Label, PushButton, 
    MenuBar, Menu, Action, StatusBar, StatusItem, DockArea, DockItem, CheckBox, Html)
from enaml.layout.api import (vbox, hbox, spacer, align, HSplitLayout, VSplitLayout, TabLayout, InsertItem)
from enaml.stdlib.message_box import question
from enaml.core.looper import Looper
from enaml.icon import Icon, IconImage
from enaml.image import Image
import qtawesome as qta
from enaml.styling import (
    StyleSheet, Style, Setter
)
from enamlx.widgets.table_view import (
    TableView, TableViewRow, TableViewItem
)
from atom.api import (Atom, Unicode, Range, ContainerList, Bool)
from enaml.core.api import Include

import os

from .widgets.symbol_search import SymbolSearch
#from .widgets.symbol_search import TableView
from .widgets.tableview import TableView
from .widgets.data_frame_table import DataFrameTable

from .widgets.list import QtListStrWidget
import qtawesome as qta
from PyQt5.QtGui import QIcon, QImage
from ..main import Status

enamldef SampleAction(Action):
    text = 'Quit'
    triggered :: print(text)

def image(name):    
    dirname = os.path.dirname(__file__)
    #return os.path.join(dirname, 'images', name)
    path = os.path.join(dirname, 'images', name)
    b = open(path, 'rb').read()
    #print(b)
    return b

def image_path(name):
    dirname = os.path.dirname(__file__)
    return os.path.join(dirname, 'images', name)

enamldef AppSheet(StyleSheet):
    pass

enamldef MyMenuBar(MenuBar): 
    attr mw
    attr about_window = AboutDialog()
    Menu:
        title = '&File'
        Action:
            text = 'Quit\tCtrl+Z'
            triggered :: mw.close()
    Menu:
        title = '&Help'
        Action:
            text = 'About'
            triggered :: about_window.show()

enamldef MyStatusBar(StatusBar):
    StatusItem:
        Label:
            text = "Ready"

enamldef AboutDialog(Dialog):
    attr s = self
    title = 'About'    
    icon = Icon(_tkdata=qta.icon('mdi.owl', options=[{'color': '#5cf442'}]))
    Container:
        constraints = [
            vbox(                
                hbox(icon, html), 
                pb
            ),
            align('v_center', icon, html),
            html.width == 400,
        ]
        Label: icon:
            text = 'icon'
        Html: html:
            source = '<h1><center>Datasource manager for stock analysis</center></h1>'
        PushButton: pb:
            text = 'OK'
            clicked :: s.hide()

def confirm_close(window, event):
    button = question(
        window, 'Appliction closing', 'Are you sure to exit?\nWarning: All connections will be lost.'
    )
    if button and button.action == 'accept':
        event.accept()
    else:
        event.ignore()


enamldef MainDockArea(DockArea):
    attr datasources
    attr endpoints
    layout = VSplitLayout(
        TabLayout('n1','n2'),
        TabLayout('n3','n4')
    )

    DockItem:
        name = 'n1'
        title = 'N1'
    DockItem:
        name = 'n2'
        title = 'N2'
    DockItem:
        name = 'n3'
        title = 'N3'
    DockItem:
        name = 'n4'
        title = 'N4'
    
    #Include:
    #    objects << [DockItem(title=i.name) for i in endpoints.lst] 

enamldef Main(MainWindow):
    attr datasources1
    attr endpoints1
    attr action
    attr s = self
    title = 'Datasource Manager'    
    icon = Icon(_tkdata=qta.icon('mdi.owl', options=[{'color': '#5cf442'}]))
    closing :: confirm_close(self, change['value'])
    initialized :: 
        print('hw')
        for i in self.endpoints1.lst:
            name = i.name
            title = i.name
            item = DockItem(ep_area, name=i.name, title=i.name)
            op = InsertItem(item=name, target='n2', position='right')
            ep_area.update_layout(op)
    attr s = self
    MyMenuBar:
        mw = s
    MyStatusBar:
        pass
               
    Container:
        constraints = [
            vbox(                
                ep_area
            ),
            #align('v_center', label, combo_align)
        ]

        MainDockArea: ep_area:
            endpoints << endpoints1

                